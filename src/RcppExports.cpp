// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// get_underlying_cpp
arma::vec get_underlying_cpp(const arma::vec& S, const arma::vec& D, const arma::vec& T, const arma::vec& r, const arma::vec& std, const double tol);
RcppExport SEXP _DtD_get_underlying_cpp(SEXP SSEXP, SEXP DSEXP, SEXP TSEXP, SEXP rSEXP, SEXP stdSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type D(DSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type T(TSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type std(stdSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(get_underlying_cpp(S, D, T, r, std, tol));
    return rcpp_result_gen;
END_RCPP
}
// kmv
arma::vec kmv(const arma::vec& S, const arma::vec& D, const arma::vec& T, const arma::vec& r, const arma::vec& time, double vol, const double tol);
RcppExport SEXP _DtD_kmv(SEXP SSEXP, SEXP DSEXP, SEXP TSEXP, SEXP rSEXP, SEXP timeSEXP, SEXP volSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type D(DSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type T(TSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type time(timeSEXP);
    Rcpp::traits::input_parameter< double >::type vol(volSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(kmv(S, D, T, r, time, vol, tol));
    return rcpp_result_gen;
END_RCPP
}
// BS_call
double BS_call(const double V, const double D, const double T, const double r, const double std);
RcppExport SEXP _DtD_BS_call(SEXP VSEXP, SEXP DSEXP, SEXP TSEXP, SEXP rSEXP, SEXP stdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type V(VSEXP);
    Rcpp::traits::input_parameter< const double >::type D(DSEXP);
    Rcpp::traits::input_parameter< const double >::type T(TSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const double >::type std(stdSEXP);
    rcpp_result_gen = Rcpp::wrap(BS_call(V, D, T, r, std));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_DtD_get_underlying_cpp", (DL_FUNC) &_DtD_get_underlying_cpp, 6},
    {"_DtD_kmv", (DL_FUNC) &_DtD_kmv, 7},
    {"_DtD_BS_call", (DL_FUNC) &_DtD_BS_call, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_DtD(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
