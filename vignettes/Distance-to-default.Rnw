\documentclass{article}
\usepackage{natbib}
\usepackage{amsmath}

\newcommand*\diff{\mathop{}\!\mathrm{d}}
\newcommand{\Lpar}[1]{\left( #1\right)}

\begin{document}

<<setup, echo = FALSE>>=
options(width = 60, digits = 4)
knitr::opts_chunk$set(
  echo = TRUE, dpi = 128, message = FALSE, error = FALSE, fig.height = 3.5,
  size = "small")

.def.chunk.hook  <- knitr::knit_hooks$get("chunk")
knitr::knit_hooks$set(chunk = function(x, options) {
  x <- .def.chunk.hook(x, options)
  ifelse(options$size != "normalsize",
         paste0("\\", options$size,"\n\n", x, "\n\n \\normalsize"),
         x)
})
@

\title{Distance to default package}
\author{Benjamin Christoffersen}

\maketitle

This package is provides fast functions to work with the Merton's distance to default model. We will only briefly cover the model here. See e.g., \cite{Lando09} for a more complete coverage. Denote the observed market values by $S_t$ and unobserved asset values by $V_t$. We assume that $V_t$ follows a geometric Brownian motion

$$dV_t = \mu V_t\diff t + \sigma V_t \diff W_t$$

We assume that we observe the assets over increaments of $dt$ in time. Thus, we will let $V_k$ the value at $t_0 + k \cdot dt$. Thus,

$$V_{k + 1} = V_{k}\exp\Lpar{\Lpar{\mu - \frac{1}{2}\sigma^2}dt + \sigma W_t}$$

We further let $r$ denote the risk free rate, $D_t$ denote debt due at time $t + T$. Then%
%
\begin{align}
C(V_t, D_t, T, \sigma, r) &= V_t N(d_1) - D_t \exp\Lpar{-rT} N(d_1 - \sigma\sqrt T) \nonumber \\
%
d_1 &= \frac{\log(V_t) - \log{D_t} + \Lpar{r + \frac{1}{2}\sigma^2}T}{\sigma\sqrt T} \label{eq:dd} \\
%
S_t &= C(V_t, D_t, T, \sigma, r) \label{eq:stock_relation}
\end{align}%
%
where $C$ is a European call option. $T$ is the time time to maturity, $D_t$ is the debt to due at time $T + t$, and $r$ is the risk free rate. $d_1$ in equation~\eqref{eq:dd} is the so-called distance to default. Equation~\eqref{eq:stock_relation} can be computed with the \verb|BS_call| function. Further, the \verb|get_underlying| can be used to invert the equation~\eqref{eq:stock_relation}

<<show_call>>=
library(DtD)
(S <- BS_call(100, 90, 1, .1, .3))
get_underlying(S, 90, 1, .1, .3)
options(digits = 4)
@

To illustrate the above then we can simulate the underlying and transform the data into the stock price as follows

<<first_sim>>=
# assign parameters
vol <- .1
mu  <- .05
dt  <- .05
V_0 <- 100
t.  <- (1:50 - 1L) * dt
D   <- c(rep(80, 27), rep( 70, length(t.) - 27))
r   <- c(rep( 0, 13), rep(.02, length(t.) - 13))

# simulate underlying
set.seed(seed <- 83992673)
V <- V_0 * exp(
  (mu - vol^2/2) * t. + cumsum(c(
    0, rnorm(length(t.) - 1, sd = vol * sqrt(dt)))))

# compute stock price
S <- mapply(BS_call, V, D, T = 1, r, vol)
plot(t., S, type = "l", xlab = "Time", ylab = expression(S[t]))
@

Despite that the model assume a constant risk free rate than we let it vary in this example. We end by plotting the stock price. Further, we can confirm that we the same underlying after transforming back

<<check_back>>=
all.equal(V, get_underlying(S, D, 1, r, vol))
@

We could also have used the simulation function in the package

<<show_sim_gives_same>>=
set.seed(seed) # use same seed
sims <- BS_sim(
  vol = vol, mu = mu, dt = dt, V_0 = V_0, D = D, r = r, T. = 1)

isTRUE(all.equal(sims$V, V))
isTRUE(all.equal(sims$S, S))
@


\section{Drift and volatility estimation}

There are a few ways to estimate the volaltilty, $\sigma$,  and drift, $\mu$. This package only includes the iterative procedure and maximum likelihood method covered in \cite{Duan94,Vassalou04,Duan04,Bharath08}. We denote the former as the ``KMV'' method and the latter as the MLE. We have not implemented the method in \cite{Kmv03} as it will be based on two meassurements and may be quite variable \citep[as mentioned in][]{Kmv03}.

The parameters can be estimeted with the \verb|BS_fit| function. The KMV method is used in the following call

<<use_kmv>>=
# simulate data
set.seed(52722168)
sims <- BS_sim(
  vol = .2, mu = .05, dt = 1/252, V_0 = 100, r = .01, T. = 1,
  # simulate firm that grows partly by lending
  D = 80 * (1 + .03 * (0:(252 * 4)) / 252))

# the sims data.frame has a time column. We need to pass this
head(sims$time, 6)

# estimate parameters
BS_fit(S = sims$S, D = sims$D, T. = sims$T, r = sims$r, time = sims$time)
@

The volatility is quite close the actual value while the mean is drift. This may be due to the fact that the likelihood is flat in the drift. We can also estimate the parameters when there unequal time gaps in the data set

<<include = FALSE, eval = FALSE>>=
out <- replicate(
  1000L, {
    sims <<- BS_sim(
      vol = .2, mu = .05, dt = 1/252, V_0 = 100, r = .01, T. = 1,
      # simulate firm that grows partly by lending
      D = 80 * (1 + .03 * (0:(252 * 1)) / 252))

    BS_fit(S = sims$S, D = sims$D, T. = sims$T, r = sims$r, time = sims$time)$ests
  })
@

<<show_works_with_uneq_gaps>>=
# drop random rows
sims <- sims[sort(sample.int(nrow(sims), 100L)), ]

# the gap lengths are not equal anymore
range(diff(sims$time))

# estimate parameters
BS_fit(S = sims$S, D = sims$D, T. = sims$T, r = sims$r, time = sims$time)
@

\medskip

\bibliographystyle{rusnat}
\bibliography{Distance-to-default}


\end{document}
